(page "index.html"
  (:refer-clojure :exclude [int])
  (:require [cljs.reader :as reader]
            [tic-tac-toe :as ttt]))

(defn switch-color [c]
  (if (= c "blue") "red" "blue"))

(defc prog1 [1 2 3])
(defc prog2 [4 5 6])
(defc prog3 [7 8 9])
(defc color "blue")
(defc= stat (ttt/stats (ttt/basic-arr-prefs (vector prog1 prog2 prog3))))

(defn evaluate []
  (dosync
    (reset! prog1 (reader/read-string (str "[" (val-id "prog1") "]")))
    (reset! prog2 (reader/read-string (str "[" (val-id "prog2") "]")))
    (reset! prog3 (reader/read-string (str "[" (val-id "prog3") "]"))))
    (swap! color switch-color))

(html
  (head
    (link :href "css/bootstrap.css" :rel "stylesheet"))
  (body
    (div :class "container"
      (div :class "row"
        (h1 "Tic-Tac-Toe AI Evaluator")
        (div :class "col-md-6"
            (form
              (div :class "form-group" 
                (h2 "Follow each of the rules in order, use the first one that applies.")
                (ol
                  (li "If I have two in a line, move to win!")
                  (li "If opponent has two in a line, move to block.")
                  (li "Else put in the first empty square, according to the following priority:"))
                (input 
                 :id "prog1"
                 :size "6"
                 :type "text"
                 :value "1 2 3"
                 :class "form-control input-lg")
                (input 
                 :id "prog2"
                 :size "6"
                 :type "text"
                 :value "4 5 6"
                 :class "form-control input-lg")
                (input 
                 :id "prog3"
                 :size "6"
                 :type "text"
                 :value "7 8 9"
                 :class "form-control input-lg")
                (button :on-click evaluate "Evaluate"))))
        (div :class "col-md-6"
            (h2 :style (cell= (str "color: " color)) "As first player")
            (p (text "win: ~{(get-in stat [:as-first :win])}"))
            (p (text "lose: ~{(get-in stat [:as-first :lose])}"))
            (p (text "draw: ~{(get-in stat [:as-first :draw])}"))
            (h2 :style (cell= (str "color: " color)) "As second player")
            (p (text "win: ~{(get-in stat [:as-second :win])}"))
            (p (text "lose: ~{(get-in stat [:as-second :lose])}"))
            (p (text "draw: ~{(get-in stat [:as-second :draw])}")))))
  ))
