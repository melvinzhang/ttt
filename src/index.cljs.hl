(page "index.html"
  (:refer-clojure :exclude [int])
  (:require [cljs.reader :as reader]
            [ttt.core :as ttt]
            [hoplon.core :as h :refer [div ol li html head title body h1 h2 p button text input link]]
            [dommy.core :refer-macros [sel1] :refer [value]]))

(defc prog1 [])
(defc prog2 [])
(defc prog3 [])
(defc fp-text "As first player")
(defc sp-text "As second player")
(defc stat {:as-first {:win 0, :lose 0, :draw 0} :as-second {:win 0, :lose 0, :draw 0}})
                
(defn input-field [id val]
  (input 
   :id id
   :size "6"
   :type "text"
   :value val
   :class "form-control input-lg"))

(defn read-row [iid]
  (reader/read-string (str "[" (value (sel1 iid)) "]")))

(defn update-stats []
  (dosync
    (reset! prog1 (read-row :#prog1))
    (reset! prog2 (read-row :#prog2))
    (reset! prog3 (read-row :#prog3))
    (reset! fp-text "As first player")
    (reset! sp-text "As second player")
    (reset! stat (ttt/stats (ttt/basic-arr-prefs (vector prog1 prog2 prog3))))))

(defn validate-input []
  (= (sort (concat (read-row :#prog1) (read-row :#prog2) (read-row :#prog3))) [1 2 3 4 5 6 7 8 9]))

(defn evaluate []
  (dosync
    (reset! fp-text "Please wait...")
    (reset! sp-text "Please wait..."))
  (if (validate-input)
    (.setTimeout js/window update-stats 300)
    (dosync
      (reset! fp-text "Error in input")
      (reset! sp-text "Error in input")
      (reset! stat {:as-first {:win 0, :lose 0, :draw 0} :as-second {:win 0, :lose 0, :draw 0}}))))

(html
  (head
    (title "Tic-Tac-Toe AI Evaluator")
    (link :href "css/bootstrap.css" :rel "stylesheet"))
  (body
    (div :class "container"
      (div :class "row"
        (h1 "Tic-Tac-Toe AI Evaluator")
        (div :class "col-md-6"
          (div :class "form-group"
            (h2 "Follow each of the rules in order, use the first one that applies.")
            (ol
              (li "If I have two in a line, move to win!")
              (li "If opponent has two in a line, move to block.")
              (li "Else put in the first empty square, according to the following priority:"))
            (input-field "prog1" "1 2 3")
            (input-field "prog2" "4 5 6")
            (input-field "prog3" "7 8 9")
            (button :click evaluate "Evaluate")))
        (div :class "col-md-6"
          (h2 (text "~{fp-text}"))
          (p (text "win: ~{(get-in stat [:as-first :win])}"))
          (p (text "lose: ~{(get-in stat [:as-first :lose])}"))
          (p (text "draw: ~{(get-in stat [:as-first :draw])}"))
          (h2 (text "~{sp-text}"))
          (p (text "win: ~{(get-in stat [:as-second :win])}"))
          (p (text "lose: ~{(get-in stat [:as-second :lose])}"))
          (p (text "draw: ~{(get-in stat [:as-second :draw])}")))))))
